    1、什么是js
    2、js的组成
    3、js的引入方式
    4、js的输出方式
    5、js的注释
    6、js的命名规范
    7、js的变量
    8、js的数据类型
    9、js数据类型详解
    --------------------------
    1、数组
    2、函数
    3、js比较(==与===)
    4、js数据类型的区别
    5、js数据类型的检测
    6、js运算符
    7、js中的判断语句
    8、js中的循环语句

▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
1、什么是JavaScript
    js是一种基于对象的弱类型脚本语言，它是运行在客户端的，运行环境是浏览器，安全性低。
2、JavaScript的组成
    ECMAScript   它是js的规则，js是由这个规则延伸和拓展的  版本：ES5  ES6
    DOM（文档对象模型）  操作
        DOM元素：从html元素 包括的所有内容 顶层document
        元素：html来理解的话，标签和内容组成一个元素
    BOM（浏览器对象模型）操作的是window  顶层window
3、JavaScript的引入方式
    1>.行内式   将js代码写在标签内
        <div onclick="alert('')"></div>
    2>.内嵌式
        <script type="text/javascript">
            alert('');
        </script>
    3>.外链式   引入一个外部的js文件
        <script src="js.js" type="text/javascript"></script>
    注意：a.内嵌式和外链式写在整个文档内容之后
          b.外链式标签中间的代码块不生效
4、js的输出方式
    1>.文档中输出(用户可见)
        document.write('文档中输出');
        它可以识别html标签
        注意：使用window.onload中写入document.write()会覆盖页面原有内容
    2>.控制台输出（用户不可见，开发人员用来学习和调试bug）
       1>.console.log('') 输出普通信息
       2>.console.error('') 输出异常信息，显示红色报错
       3>.console.dir('') 输出一个对象的全部属性，包括自身属性和自定义属性
       4>.console.clear('')清空控制台
    3>.alert输出（用户和开发人员都可见）
        alert('输出的内容')
    4>.向指定元素输出（用户可见）
        innerHTML，innerText添加内容，或者获取指定元素的内容
        innerHTML 可以识别标签，将标签以原有形式输出
        innerText 不可以识别标签，会将标签当做普通文本输出
        都代表了标签中的内容，可以获取，也可以再次赋值
        获取内容：
            obj.innerHTML/obj.innerText
        赋值：
            obj.innerHTML='';/obj.innerText='';
5、js的注释
    单行注释  //注释内容       ctrl+/
    多行注释  /*注释内容*/     shift+ctrl+/
6、js的命名规范
    1>.严格区分大小写
        在ie6,ie7不区分大小写，所以取名时，不要用大小写来进行区分。
    2>.变量由字母、数字、下划线，$符号组成，数字不能作为开头
    3>.推荐使用驼峰命名法
        多个单词组合的时候，第一个有意义的单词首字母小写，其余单词首字母大写。
        eg:var newAry=[];
    4>.不能使用关键字和保留字
    5>.变量匈牙利命名类型
        eg:对象 var oDiv; var dTime; var str;
7、js中的变量
    变量是用来存储值和代表值的，因为js是弱类型语言，它的变量是松散数据类型，所以js变量可以存储任何数据类型的值。
    怎样声明变量？
    var name=value;
    如果没有赋值，获取这个变量值的时候，返回值是undefined
    变量可以一次声明，多次创建   var a=1,b=2,c=3;
    bg='red' 不能这样用
8、js中数据类型的分类
    1>.基本数据类型：数字（number），字符串(string)，布尔(boolean)，null，undefined
    2>.引用数据类型：包括对象数据类型，函数数据类型
        对象数据类型object：数组类(Array)，对象类(Object)，正则类(RegExp)，时间类Date，数学函数类Math
        函数数据类型：function
    p.s:js变量均为对象，当您声明一个变量时，就创建了一个新的对象。
9、js数据类型详解
    （1）、数字数据类型
        包括：整数(正整数 0 负整数)，小数，NaN
        1>.Number(转化前的值)   ->返回值 数字/NaN
            转化规则：
                1>.字符串直接转化
                    Number('123')-->123
                    Number('1/5')-->NaN    字符串中运算符不会进行数学运算
                2>.对象先转化为字符串(toString()),再转为数字(Number())
                    []      [].toString()-->''                   Number('')-->0
                    [1]     [1].toString()-->'1'                 Number('1')-->1
                    [1,2]   [1,2].toString()-->'1,2'             Number('1,2')-->NaN
                    {}      {}.toString()-->'[object Object]'    Number('[object Object]')-->NaN
                3>.布尔直接转化为数字
                    Number(true) -->1
                    Number(false) -->0
                4>.Number(null)   -->0
                5>.Number(undefined)  -->NaN
                注意：
                    + 如果遇到字符串，优先进行字符串拼接，如果加号两侧都是数字，进行数学运算
                    eg:1+‘12’ -->'112'
                    ()在js中是优先运算
        2>.parseFloat() 返回浮点数
            从第一个值开始查找，直到不是数字的结束，可以识别小数点
                '1.3cv' -->1.3
                'abc1.3'  -->NaN
                .5 -->0.5
                '.5' -->0.5
        3>.parseInt() 返回整数
            从第一个值开始查找，直到不是数字的结束
                '1.3cv' -->1
                'abc1.3'  -->NaN
                .5 -->0
                '.5' -->NaN  特例，牢记
        4>.isNaN(value)  判断一个值是否不是数字
            不是数字，返回true,否则，返回false
            判断之前，先将值转化为数字数据类型，调用Number()-->强制转化为数字
                isNaN([])-->false
                isNaN(false)-->false
                isNaN({})-->true
                NaN==NaN-->false
                =赋值
                ==比较
                ===绝对比较
    （2）、字符串数据类型
        在js中用引号包起来的内容，整体成为字符串，字符串就是本身，没有意义
        .toUpperCase()将字符串中的字母全部转化为大写
        .toLowerCase()将字符串中的字母全部转化为小写
        1+'1'-->11   字符串中是数字，遇到+，优先进行字符串拼接
        1-'1'-->0    字符串中是数字，遇到-，优先进行算数运算
    （3）、布尔数据类型
        只有两个值 真true 假false
        一个值的时候，判断真假
        将其他数据类型转为布尔类型（就是判断这个值是真是假）返回值 true/false
        1>.判断规则：0 NaN '' null undefined false 是假，其余全为真
            Boolean(0)-->false
            Boolean('')-->false
            Boolean('0')-->true
            Boolean(NaN)-->false
            Boolean('NaN')-->true
            Boolean(null)-->false
            Boolean(undefined)-->false
            Boolean({})-->true
            Boolean([])-->true
        2>.!与!!
            !  先将其他数据类型转为布尔类型再取反
                !true-->false
                !0-->!false-->true
                !'0'-->!true-->false
                !'[]'-->!true-->false
            !! 先将其他数据类型转为布尔类型再取反，再取反，等价于Boolean()，就是将其他数据类型转为布尔类型
                !!'0'-->!!true-->!false-->true
                !!{}-->!!true-->!false-->true
            *******
            {}--数据类型是object
            !!{}--数据类型是布尔
            *******

    （4）、对象数据类型 Object
        1>.组成：由多组键值对（属性名和属性值）组成，用来描述这个对象
        2>.创建对象的方式
            实例创建：
                var obj=new Object();//在这个类上新建一个对象
            字面量创建：
                var obj={属性名1:属性值1,属性名2:属性值2.....}
        3>.访问对象属性的方式
            方式一：对象名.属性名    属性名为数字的时候不能使用
            方式二：对象名['属性名'] 属性名为数字的时候使用，并且属性名是数字的时候可以省略引号
        4>.增加对象的属性（自定义属性***********）
            增加一个对象原来没有的属性
            对象名.新的属性名=属性值
            对象名['新的属性名']=属性值
        5>.修改对象中的属性值：修改原对象中已有属性的属性值
            对象名.属性名='新属性值'
        6>.删除属性和删除属性值（将属性值清空）
            删除属性:这个属性就在这个对象中彻底消失
                delete 对象.属性名
                delete 对象['属性名']
            删除属性值（将属性值清空）：保留属性名，将属性值清空
                对象.属性名=null;
                对象['属性名']=null;
        7>.内置属性与自定义属性
            内置属性：对象天生自带的属性
            console.dir(obj);
            obj.className='bg'//obj元素自带的className属性
            obj.className='bg1'//修改obj元素自带的className属性的属性值
            自定义属性：当内置属性满足不了需求的时候，需要人为添加新的属性
            obj.backIndex='bg'
            自定义属性的名称一定要和内置属性的名称区分开
        8>.for-in循环遍历对象（包括遍历对象，数组，正则）
            对象中有多少对键值对，就遍历多少次
            遍历后的输出顺序按照属性名的顺序依次输出，遇到数字优先输出数字（按照数字的大小排序）
            输出属性值的时候，只能用对象名[]的形式输出，不能用对象名.的形式输出
            因为在获取属性名的时候，我们不确定属性名是否为数字，数字只支持[]形式，为了防止意外发生，统一使用[]的形式
            var obj={
                1:2,
                3:4
            }
            obj.1 错误的     obj[1]正确的
            局限性：不能遍历对象的不可枚举属性
                    对象天生自带的属性，大部分都是不可枚举属性，人为定义的属性都是可枚举属性
    （5）、null与undefined的区别
        null表示"没有对象"，即该处不应该有值（现在预留，之后可以添加）,null也可以进行保留对象并将值清空
        undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义
▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂
1、数组
    1>.数组的作用
        使用单独的变量名来存储一系列的值
        var ary=[1,'2',function(){},{name:value}];
        数组中的每一项都是值，这些值的属性名是索引
        数组有长度length 长度就是数组中值的个数
    2>.创建方式
        实例创建：var ary=new Array(val1,val2,val3...);//此处可以传递参数列表
        字面量创建：var ary=[1,2,'3'];
    3>.访问方式
        ary[0]-->获取数组中的第一项
        ary.0-->属性名为数字时，不支持这种语法
        ary[ary.length-1]-->获取数组中的最后一项
        ary[lenght-1]  undefined
        ary.length 获取数组的长度
2、函数
    1>.什么是函数
        概念：函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块
        函数是一个方法，不执行的时候就是一堆字符串
        函数可以一次定义，多次执行，每次执行和上一次都没有关系
    2>.语法
        定义部分：
            function 函数名(形参1，形参2...){
                这里是要执行的代码
            }
        执行部分：
            函数名(实参1，实参2...);
    3>. 函数的参数
        分为实参和形参
        当定义形参而没有传递实参的时候，形参获取到的值为undefined
    4>.实名函数和匿名函数
        函数分为实名函数和匿名函数
        匿名函数分为自执行函数和函数表达式
        匿名函数代表的就是函数本身，所以我们可以直接使用函数本身加上()这种形式直接执行
            (function(){})();
            !function(){}();
            +function(){}();
            -function(){}();
            ~function(){}();
        函数表达式：将函数直接复制给某个对象或者变量
            oDiv.onclick=function(){};//当点击这个事件的时候，调用这个方法
3、js比较
    两个值比较，用'=='
    比较规则：****************************
        1>.对象和对象比较，永远不相等
            所以：[]==[] -->false
        2>.对象和字符串比较
            对象-->字符串   用toString()
        3>.对象和数字比较
            对象-->字符串-->数字  先用toString() 再用Number()
        4>.对象和布尔
            对象-->字符串-->数字
            布尔-->数字
        5>.字符串和数字
            字符串-->数字
        6>.字符串和布尔
            字符串-->数字
            布尔-->数字
        7>.数字和布尔
            布尔-->数字
        8>.null与undefined
            null==undefined-->true
            null===undefined-->false
        9>.null和undefined与其他值比较都为false
        实例：
            1>. !{}=={}
                布尔和对象比较
                !{}-->!true-->false-->0
                {}-->'[object Object]'-->NaN
                0==NaN
                -->false
            2>. true==!'123'
                布尔和布尔比较
                !'123'-->!true-->false
                true==false
                -->false
            3>. ![]==0
                布尔和数字比较
                ![]-->!true-->false-->0
                0==0
                -->true
            4>. ![]==false
                布尔和布尔比较
                ![]-->!true-->false
                false==false
                -->true
            5>. {}=={}
                对象和对象比较
                -->false
            6>. []==[]
                对象和对象比较
                -->false
            7>. !{}==''
                布尔和字符串比较
                !{}-->!true-->false-->0
                ''-->0
                0==0
                -->true
            8>. ![]==''
                布尔和字符串比较
                ![]-->!true-->false-->0
                ''-->0
                0==0
                -->true
            9>. []=='0'
                对象和字符串比较
                []-->''
                ''=="0"
                -->false
            10>. !([]=='')
                !(''=='')
                !true
                -->false
            11>. !(false==0)==''
                !(0==0)==''
                !true==''
                false==''
                0==0
                -->true
4、js数据类型的区别
    基本数据类型是直接对值的操作
    引用数据类型是对空间地址的操作
        解释：代码在浏览器中从上到下执行，这个供代码执行的空间，我们叫做栈内存（也叫作全局作用域），
            在运行时遇到引用数据类型的时候，浏览器会再开辟一个内存空间，将这个对象的所有代码当做字符串存入这个空间中（这个空间一直被占用，我们叫这个内存空间为堆内存），
            浏览器会给这个空间一个16进制的地址，并且把这个地址返回给这个对象，也就是说这个对象中存的不是具体的代码，而是一个地址。
            当我们将这个对象赋值给另一个对象的时候，其实是将地址给到了另一个对象。
            那么也就是说，这两个对象操作的是同一空间，那么修改其中哪一个，空间中的内容都会发生变化
5、js数据类型的检测
    1、typeof
        语法：typeof 检测的值  或者typeof(检测的值)
        typeof 检测返回值是一个字符串，字符串中包含以下数据类型： 'number' 'string' 'object' 'function' 'undefined'
        typeof不能具体细分object下的数据类型 {}  []  /^$/-->'objcet'
        typeof null-->'object'
        如果运算中有两个以上的typeof，最终返回结果'string'***********
    2>.instanceof  判断已知对象类型的方法
        eg:[1,2] instanceof Array  -->true
    3>.constructor 判断
        eg:[1,2,3].constructor === Array  ---> true
    4>.prototype判断:Object.prototype.toString.call()  比较通用
        eg:Object.prototype.toString.call('珠峰培训') === '[object String]')---> true
6、js中的运算符
    数学运算：+  -  *  /  %  ++  --
    赋值运算：=  +=  -=  *=  /=  %=
    比较运算：==  ===  !=  >  <  >=  <=
    逻辑运算：&&  ||  !
    p.s:+=和=的区别
        =:覆盖盒子里原来的内容
        +=:保留盒子里原来的内容，进行类加
7、js中的判断语句
    1、if语句
        if判断中()内的运算返回值是布尔类型，if判断可以用在所有的js判断中
        在判断的时候，条件和执行语句没有关系
        语法：
            if(条件){
                 条件成立执行的语句
             }

             if(条件){
                 条件成立执行的语句
             }else{
                 条件不成立执行的语句
             }

             if(条件1){
                 条件1成立执行的语句
             }else if(条件2){
                 条件1不成立，条件2成立执行的语句
             }else{
                 条件1和条件2都不成立执行的语句
             }
    2、switch语句
        switch只能进行===判断(绝对判断)，即当条件和值绝对比较的时候才能执行相关代码
        语法：
            switch(a){
                case 1:
                    执行代码块1
                    break;//如果不加break，后面的语句也会执行，不管条件是否成立
                case 2:
                    执行代码块2
                    break;
                default:
                    执行代码块3(a与case 1和case 2不同时执行的代码)
            }
    3、三元运算符/三目运算符
        语法：   声明 变量=（条件）?条件为true时执行的代码：条件为false时执行的代码
        本质：   是进行变量的赋值。判断一个条件成立时，给变量赋值a，如果不成立，给变量赋值b。
        还可以改写简单的if else判断：（条件）?条件成立执行的代码:条件不成立执行的代码
        如果没有不成立时执行的代码，可以使用void 0进行占位
        如果执行多条js代码，可以放在一个括号内，中间用逗号隔开

        0==''?console.log('成立'):console.log('不成立');
        0==''?(console.log('成立'),console.log('万岁')):console.log('不成立');
        0==''?console.log('成立'):void 0;//void (0)也行
8、js中的循环语句
    1>.for循环
        适用条件：用在已知循环次数的时候
        for循环的定义：
            第一步：设定初始值,将初始值放在一个变量中
            第二步：设定循环范围（如果在范围内，返回true，进行下一轮循环，如果超出指定范围，返回false，循环结束）
            第三步：执行循环体中的代码 用{}包起来的是循环体
            第四步：进行初始值的累加操作（既可以放在for()中，也可以放在循环体中）
            for(var i=0;i<4;i++){
                console.log(i);
            }
            for(var i=0;i<4;){
                console.log(i);
                i++;
            }
        break与continue的区别：
            break出现在循环语句：跳出这个循环
            continue出现在循环语句中：跳出本次循环，执行下次循环
            无论遇到 break还是continue，循环体后面的代码都不会执行
    2>.while循环
        while(条件){
            只要条件成立，就执行这里的代码
        }
        while循环模拟for循环：
            var i=0;
            while(i<5){
                console.log(i);
                i++;
            }
    3>.do-while循环
        do{
            不管条件是否成立，先执行一次
        }while(条件)


