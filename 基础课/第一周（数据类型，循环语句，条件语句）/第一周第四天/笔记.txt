1、什么是js？
    js是运行在‘客户端’的基于‘对象’的弱类型脚本语言。
        对象：js要操作的，比如元素、浏览器
        弱类型：即松散类型，规则比较模糊。
        解释型语言：js是边运行边解释
2、js的组成？
    1>.ECMAScript
        实际上是js的操作规范（使用手册），里面规定了js的基本操作语句，数据类型，命名规范，变量，关键字，保留字等基本规范。
        javaScript和JScript实际上是ECMAScript的拓展和延伸
        主流版本：ES5，ES6
        w3c是什么？
    2>.DOM 文档对象模型（Document Object Model）
        主要是用来操作DOM对象，也就是操作document(文档对象)
        从html这个根元素开始，所有的元素都是DOM元素
        元素：在html中，将标签和内容组成的部分叫做元素
    3>.BOM 浏览器对象模型（Browser Object Model）
        主要是用来操作浏览器对象  window（浏览器对象）
3、js的引入方式？
    1>.行内式：直接将js代码写入标签内部
        <div onclick="alert('欢迎来到珠峰培训！')"></div>
    2>.内嵌式：将js代码写在script标签中
        <script type="text/javascript">
            //js代码块
            //单行注释
            /*多行注释*/
        </script>
    3>.外链式：通过script标签的src属性，引入一个js外部文件
        <script src="URL"></script>
        <script src="js.js"></script>
    引入方式需要注意：
    a.外链式和内嵌式需要写在整个文档内容之后
        因为js是操作文档对象的，js操作之前，需要将整个文档对象加载完成后，才能获得相应的操作对象
        如果想将js放在整个文档前，我们可以增加(window.onload--整个文档和浏览器加载完成后，再执行js操作)
    b.代码块写在外链式标签中，不起作用
4、js的输出方式
    a.文档输出
        document.write("<p>输出内容</p>");
        可以识别输出内容中的html标签
        p.s:在整个文档加载之后输出的时候，会覆盖整个文档
    b.在控制台输出(主要是给开发人员使用)
        1>.输出一条信息，如果想一次输出多条信息
            console.log(value1,value2,value3);
        2>.输出一个对象的所有属性和方法
            console.dir(object);
        3>.清空控制台  快捷键ctrl+l
            console.clear();
        4>.向控制台抛出一个js异常
            console.error("抛出的异常信息");
    c.alert()
    d.获取指定元素的内容或给指定元素添加内容
        innerHTML：获取指定对象的所有内容（包括html标签和文字内容）
        innerText：获取指定对象内的所有文字内容
5、js中的命名规范
    1>.严格区分大小写  命名为obj，调用的时候OBJ是不可以的
    2>.名称可以由字母，数字， 下划线，$组成，数字不能为首位
    3>.推荐使用驼峰命名法，多个有意义的单词组成名称的时候，第一个单词首字母小写，其余单词首字母大写
    4>.不能使用关键字和保留字
        关键字：在js中已经定义特殊含义的
        var for function delete in
        保留字：未来可能成为关键字
    5>.变量命名的时候，尽量使用匈牙利类型
        例如：对象类(Object)-->oDiv      数组类(Array)-->ary
6、js中的变量
    作用：用来代表值和储存值
    特点：可以看做是一个容器
          可以放置任何的值--js中的变量是松散类型的
          变量名是人为给定的
          变量在定义的时候，需要声明一下，一次声明可以定义多个变量
    定义变量：声明 变量名;
        变量可以只定义，不赋值，获取这个变量的值是undefined
        如果需要赋值操作，用等号来赋值
        一次声明，多个变量进行定义，每一个变量之间用逗号隔开
        var obj1={},obj2={name:1},ary=[],nul=1;
        var obj1={};
        var obj2={name:1}
        var ary=[];
        var num=1;
7、js中的数据类型
    js中所有操作的内容都叫做对象，根据各自的特点和属性不同，分成很多类，那么每一个类中具体的一项，我们就称之为实例
    基本数据类型：数字(number)  字符串(string)  布尔(boolean)  null  undefined
    引用数据类型：
        对象数据类型(object)
            对象类(Object)  数组类(Array)  正则类(RegExp)  时间类(Date)  数学函数类(Math)  浮点类(Float)
        函数数据类型(function)
8、基本数据类型
    1>.数字数据类型(number)
        1.1.包括：整数（正整数 0 负整数）,小数，NaN
        1.2.将其他数据类型转化成数字数据类型
            强制转化：只要值中有一个不是数字，就返回NaN
                Number(value)  返回值：数字/NaN
                规则：1>.对象类(object)先转化为字符串(调用toString())，再转化为数字
                         object类包括：{},[],/^$/
                        [].toString()-->''   Number('')-->0
                        {}.toString()-->'[object Object]'  Number('[object Object]')-->NaN
                      2>.字符串直接转化为数字
                      3>.布尔直接转化为数字 true-->1  false-->0
                      4>.null-->0
                      5>.undefined-->NaN
            非强制转化：从第一项开始，只要遇到不是数字的结束
                paseInt(value)   只能识别整数
                paseFloat(value) 可以识别字符串中的一个点
                以上两种方法，可以解析字符串，从字符串的第一个字符向右查找，直到不是数字，返回查找后的结果
        1.3.判断一个值不是数字
            isNaN(value)  返回值是true或false,不是数字返回true，是数字返回false
            判断之前，先将value转为数字数据类型
            NaN与任何数比较都为NaN
    2>.布尔数据类型 boolean
        布尔包括两个值true 和false
        判断一个值是真是假
        0 NaN '' null undefined为假，其余都为真
        Boolean(value) 通过这个方法可以判断是真是假，返回值false/true
        Boolean(value)将其他数据类型转为布尔类型
        !value  先将value转为布尔类型，再取反
        !!value 先将value转为布尔类型，再取反，再取反
        两个值进行比较：
            分为等于（==）和全等于（===）
            ==：转化数据类型后比较，相等。
            ===：绝对相等，值和类型都一致

            两个等号比较的原则：
            1、对象和对象
                -->false
            2、对象和字符串
                对象--》字符串
            3、对象和数字
                对象--》字符串--》数字
            4、对象和布尔
                对象--》字符串--》数字
                布尔--》数字
            5、字符串和数字
                字符串--》数字
            6、布尔和数字
                布尔--》数字
            7、字符串和布尔
                字符串--》数字
                布尔--》数字
            8、null和undefined
                null==undefined -->false
                null===undefined -->true
            9、null和undefined与其他类型比较
                -->false
            10、NaN==NaN
                -->false
            实例：
            true==''
            -->false

            {}==[]
            -->false

            !{}==false
            --true

            ![]==0
            -->true

            ![]==false
            -->true

            1==[1]
            -->true

            '1'==[1]
            -->true

            **********************
            'name:1'=={name:1}
            -->false

            !(1=='[]')
            !(1==NaN)
            -->true

            !0==false
            -->false
            null和undefined????????
9.引用数据类型
    1.对象数据类型  object
     js中的对象都是由多组键值对组成（属性名和属性值），这些键值对用来描述这个对象
    1>.如何创建对象：
        实例创建：
            var obj=new Object();
            var ary=new Array();
        字面量创建:
            var obj={name:'xy',age:123};
            var ary=['a','b',function(){}];数组中都是属性值，它的属性名是索引
    2>.如何访问对象：
        对象名.属性名;     属性名不能为数字
        对象名['属性名'];  属性名可以为数字，为数字时，可以省略引号
        obj.name/obj['name']
    3>.如何修改属性：
        对象名.属性名='新的属性值';
        对象名['属性名']='新的属性值'
    4>.如何添加属性：
        对象名.新属性名='属性值';
        对象名['新属性名']='属性值';
    5>.如何删除属性和属性值：
        删除属性
            delete 对象名.属性名;
            delete 对象名['属性名'];
        删除属性值
            对象名.属性名=null;

            对象名['属性名']=null;
函数
可重复执行的代码块
分为实名函数和匿名函数
匿名函数分为自执行函数和函数表达式
?
函数表达式是将函数定义部分当做值赋值给一个变量或者是某一个对象的一个行为
<a href="javascript:void (0)"></a>




false
true
true
true
false
'.5'-->

false
true