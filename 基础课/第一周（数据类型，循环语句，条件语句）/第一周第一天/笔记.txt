第一周第一天知识点概要：
    1.什么是js**
    2.js的组成****
    3.js的引入方式***
    4.js的输出方式
    5.js的注释
    6.js的命名规范
    7.js的变量
    8.js的数据类型********

=================================================================================
1、什么是JavaScript
    js是一种基于对象的弱类型脚本语言，它是运行在客户端的，运行环境是浏览器，安全性低。
2、JavaScript的组成
    ECMAScript   它是js的规则，js是由这个规则延伸和拓展的  版本：ES5  ES6
    DOM（文档对象模型）  操作
        DOM元素：从html元素 包括的所有内容 顶层document
        元素：html来理解的话，标签和内容组成一个元素
    BOM（浏览器对象模型）操作的是window  顶层window
3、JavaScript的引入方式
    1>.行内式   将js代码写在标签内
        <div onclick="alert('')"></div>
    2>.内嵌式
        <script type="text/javascript">
            alert('');
        </script>
    3>.外链式   引入一个外部的js文件
        <script src="js.js" type="text/javascript"></script>
    注意：a.内嵌式和外链式写在整个文档内容之后
          b.外链式标签中间的代码块不生效
4、js的输出方式
    1>.文档中输出(用户可见)
        document.write('文档中输出');
        它可以识别html标签
        注意：使用window.onload中写入document.write()会覆盖页面原有内容
    2>.控制台输出（用户不可见，开发人员用来学习和调试bug）
       1>.console.log('') 输出普通信息
       2>.console.error('') 输出异常信息，显示红色报错
       3>.console.dir('') 输出一个对象的全部属性，包括自身属性和自定义属性
       4>.console.clear('')清空控制台
    3>.alert输出（用户和开发人员都可见）
        alert('输出的内容')
    4>.向指定元素输出（用户可见）
        innerHTML，innerText添加内容，或者获取指定元素的内容
        innerHTML 可以识别标签，将标签以原有形式输出
        innerText 不可以识别标签，会将标签当做普通文本输出
        都代表了标签中的内容，可以获取，也可以再次赋值
        获取内容：
            obj.innerHTML/obj.innerText
        赋值：
            obj.innerHTML='';/obj.innerText='';
5、js的注释
    单行注释  //注释内容       ctrl+/
    多行注释  /*注释内容*/     shift+ctrl+/
6、js的命名规范
    1>.严格区分大小写
        在ie6,ie7不区分大小写，所以取名时，不要用大小写来进行区分。
    2>.变量由字母、数字、下划线，$符号组成，数字不能作为开头
    3>.推荐使用驼峰命名法
        多个单词组合的时候，第一个有意义的单词首字母小写，其余单词首字母大写。
        eg:var newAry=[];
    4>.不能使用关键字和保留字
    5>.变量匈牙利命名类型
        eg:对象 var oDiv; var dTime; var str;
7、js中的变量
    变量是用来存储值和代表值的，因为js是弱类型语言，它的变量是松散数据类型，所以js变量可以存储任何数据类型的值。
    怎样声明变量？
    var name=value;
    如果没有赋值，获取这个变量值的时候，返回值是undefined
    变量可以一次声明，多次创建   var a=1,b=2,c=3;
    bg='red' 不能这样用
8、js中数据类型的分类
    1>.基本数据类型：数字（number），字符串(string)，布尔(boolean)，null，undefined
    2>.引用数据类型：包括对象数据类型，函数数据类型
        对象数据类型object：数组类(Array)，对象类(Object)，正则类(RegExp)，时间类Date，数学函数类Math
        函数数据类型：function
    p.s:js变量均为对象，当您声明一个变量时，就创建了一个新的对象。
9、js数据类型详解
    （1）、数字数据类型
        包括：整数(正整数 0 负整数)，小数，NaN
        1>.Number(转化前的值)   ->返回值 数字/NaN
            转化规则：
                1>.字符串直接转化
                    Number('123')-->123
                    Number('1/5')-->NaN    字符串中运算符不会进行数学运算
                2>.对象先转化为字符串(toString()),再转为数字(Number())
                    []      [].toString()-->''                   Number('')-->0
                    [1]     [1].toString()-->'1'                 Number('1')-->1
                    [1,2]   [1,2].toString()-->'1,2'             Number('1,2')-->NaN
                    {}      {}.toString()-->'[object Object]'    Number('[object Object]')-->NaN
                3>.布尔直接转化为数字
                    Number(true) -->1
                    Number(false) -->0
                4>.Number(null)   -->0
                5>.Number(undefined)  -->NaN
                注意：
                    + 如果遇到字符串，优先进行字符串拼接，如果加号两侧都是数字，进行数学运算
                    eg:1+‘12’ -->'112'
                    ()在js中是优先运算
        2>.parseFloat() 返回浮点数
            从第一个值开始查找，直到不是数字的结束，可以识别小数点
                '1.3cv' -->1.3
                'abc1.3'  -->NaN
                .5 -->0.5
                '.5' -->0.5
        3>.parseInt() 返回整数
            从第一个值开始查找，直到不是数字的结束
                '1.3cv' -->1
                'abc1.3'  -->NaN
                .5 -->0
                '.5' -->NaN  特例，牢记
        4>.isNaN(value)  判断一个值是否不是数字
            不是数字，返回true,否则，返回false
            判断之前，先将值转化为数字数据类型，调用Number()-->强制转化为数字
                isNaN([])-->false
                isNaN(false)-->false
                isNaN({})-->true
                NaN==NaN-->false
                =赋值
                ==比较
                ===绝对比较
    （2）、字符串数据类型
        在js中用引号包起来的内容，整体成为字符串，字符串就是本身，没有意义
        .toUpperCase()将字符串中的字母全部转化为大写
        .toLowerCase()将字符串中的字母全部转化为小写
        1+'1'-->11   字符串中是数字，遇到+，优先进行字符串拼接
        1-'1'-->0    字符串中是数字，遇到-，优先进行算数运算
    （3）、布尔数据类型
        只有两个值 真true 假false
        一个值的时候，判断真假
        将其他数据类型转为布尔类型（就是判断这个值是真是假）返回值 true/false
        1>.判断规则：0 NaN '' null undefined false 是假，其余全为真
            Boolean(0)-->false
            Boolean('')-->false
            Boolean('0')-->true
            Boolean(NaN)-->false
            Boolean('NaN')-->true
            Boolean(null)-->false
            Boolean(undefined)-->false
            Boolean({})-->true
            Boolean([])-->true
        2>.!与!!
            !  先将其他数据类型转为布尔类型再取反
                !true-->false
                !0-->!false-->true
                !'0'-->!true-->false
                !'[]'-->!true-->false
            !! 先将其他数据类型转为布尔类型再取反，再取反，等价于Boolean()，就是将其他数据类型转为布尔类型
                !!'0'-->!!true-->!false-->true
                !!{}-->!!true-->!false-->true
            *******
            {}--数据类型是object
            !!{}--数据类型是布尔
            *******

    （4）、对象数据类型 Object
        1>.组成：由多组键值对（属性名和属性值）组成，用来描述这个对象
        2>.创建对象的方式
            实例创建：
                var obj=new Object();//在这个类上新建一个对象
            字面量创建：
                var obj={属性名1:属性值1,属性名2:属性值2.....}
        3>.访问对象属性的方式
            方式一：对象名.属性名    属性名为数字的时候不能使用
            方式二：对象名['属性名'] 属性名为数字的时候使用，并且属性名是数字的时候可以省略引号
        4>.增加对象的属性（自定义属性***********）
            增加一个对象原来没有的属性
            对象名.新的属性名=属性值
            对象名['新的属性名']=属性值
        5>.修改对象中的属性值：修改原对象中已有属性的属性值
            对象名.属性名='新属性值'
        6>.删除属性和删除属性值（将属性值清空）
            删除属性:这个属性就在这个对象中彻底消失
                delete 对象.属性名
                delete 对象['属性名']
            删除属性值（将属性值清空）：保留属性名，将属性值清空
                对象.属性名=null;
                对象['属性名']=null;
        7>.内置属性与自定义属性
            内置属性：对象天生自带的属性
            console.dir(obj);
            obj.className='bg'//obj元素自带的className属性
            obj.className='bg1'//修改obj元素自带的className属性的属性值
            自定义属性：当内置属性满足不了需求的时候，需要人为添加新的属性
            obj.backIndex='bg'
            自定义属性的名称一定要和内置属性的名称区分开
        8>.for-in循环遍历对象（包括遍历对象，数组，正则）
            对象中有多少对键值对，就遍历多少次
            遍历后的输出顺序按照属性名的顺序依次输出，遇到数字优先输出数字（按照数字的大小排序）
            输出属性值的时候，只能用对象名[]的形式输出，不能用对象名.的形式输出
            因为在获取属性名的时候，我们不确定属性名是否为数字，数字只支持[]形式，为了防止意外发生，统一使用[]的形式
            var obj={
                1:2,
                3:4
            }
            obj.1 错误的     obj[1]正确的
            局限性：不能遍历对象的不可枚举属性
                    对象天生自带的属性，大部分都是不可枚举属性，人为定义的属性都是可枚举属性
    （5）、null与undefined的区别
        null表示"没有对象"，即该处不应该有值（现在预留，之后可以添加）,null也可以进行保留对象并将值清空
        undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义
=================================================================================
作业：
    1、整理纸质的笔记
    2、进行复习

预习：
    三个判断   三个循环
    数据类型的区别
=================================================================================
复习：
强制转化:只要有一个不是数字，就不能转化
非强制转化:从第一个开始查找，直到不是数字的结束
parseInt({1:1})-->NaN
****对象里面有没有值，转化结果都为'[object Object]'结果为NaN

布尔运算：
    Boolean(value)等价于!!value
    !value 先将数据类型转化为布尔类型Boolean(value)，再取反
    !!value 先将数据类型转化为布尔类型Boolean(value)，再取反,再取反

null与undefined的区别
    null现在没有，将来可能有
    undefined现在没有，将来也没有

对象的增删改查（重点）
    如何创建
    如何访问
    如何增加属性
    如何修改属性
    如何删除属性与属性值

变量是容器--独立存在
属性是容器--依附对象存在
都可以保持值
var bg='red'
obj.style.backgroundColor=bg;