第一周第二天知识点概要：
    1、数组
    2、函数
    3、js比较(==与===)
    4、js数据类型的区别
    5、js数据类型的检测
    6、js运算符
    7、js中的判断语句

=================================================================================
1、数组
    1>.数组的作用
        使用单独的变量名来存储一系列的值
        var ary=[1,'2',function(){},{name:value}];
        数组中的每一项都是值，这些值的属性名是索引
        数组有长度length 长度就是数组中值的个数
    2>.创建方式
        实例创建：var ary=new Array(val1,val2,val3...);//此处可以传递参数列表
        字面量创建：var ary=[1,2,'3'];
    3>.访问方式
        ary[0]-->获取数组中的第一项
        ary.0-->属性名为数字时，不支持这种语法
        ary[ary.length-1]-->获取数组中的最后一项
        ary[lenght-1]  undefined
        ary.length 获取数组的长度
2、函数
    1>.什么是函数
        概念：函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块
        函数是一个方法，不执行的时候就是一堆字符串
        函数可以一次定义，多次执行，每次执行和上一次都没有关系
    2>.语法
        定义部分：
            function 函数名(形参1，形参2...){
                这里是要执行的代码
            }
        执行部分：
            函数名(实参1，实参2...);
    3>. 函数的参数
        分为实参和形参
        当定义形参而没有传递实参的时候，形参获取到的值为undefined
    4>.实名函数和匿名函数
        函数分为实名函数和匿名函数
        匿名函数分为自执行函数和函数表达式
        匿名函数代表的就是函数本身，所以我们可以直接使用函数本身加上()这种形式直接执行
            (function(){})();
            !function(){}();
            +function(){}();
            -function(){}();
            ~function(){}();
        函数表达式：将函数直接复制给某个对象或者变量
            oDiv.onclick=function(){};//当点击这个事件的时候，调用这个方法
3、js比较
    两个值比较，用'=='
    比较规则：**********************************************************************
        1>.对象和对象比较，永远不相等
            所以：[]==[] -->false
        2>.对象和字符串比较
            对象-->字符串   用toString()
        3>.对象和数字比较
            对象-->字符串-->数字  先用toString() 再用Number()
        4>.对象和布尔
            对象-->字符串-->数字
            布尔-->数字
        5>.字符串和数字
            字符串-->数字
        6>.字符串和布尔
            字符串-->数字
            布尔-->数字
        7>.数字和布尔
            布尔-->数字
        8>.null与undefined
            null==undefined-->true
            null===undefined-->false
        9>.null和undefined与其他值比较都为false
        实例：
            1>. !{}=={}
                布尔和对象比较
                !{}-->!true-->false-->0
                {}-->'[object Object]'-->NaN
                0==NaN
                -->false
            2>. true==!'123'
                布尔和布尔比较
                !'123'-->!true-->false
                true==false
                -->false
            3>. ![]==0
                布尔和数字比较
                ![]-->!true-->false-->0
                0==0
                -->true
            4>. ![]==false
                布尔和布尔比较
                ![]-->!true-->false
                false==false
                -->true
            5>. {}=={}
                对象和对象比较
                -->false
            6>. []==[]
                对象和对象比较
                -->false
            7>. !{}==''
                布尔和字符串比较
                !{}-->!true-->false-->0
                ''-->0
                0==0
                -->true
            8>. ![]==''
                布尔和字符串比较
                ![]-->!true-->false-->0
                ''-->0
                0==0
                -->true
            9>. []=='0'
                对象和字符串比较
                []-->''
                ''=="0"
                -->false
            10>. !([]=='')
                !(''=='')
                !true
                -->false
            11>. !(false==0)==''
                !(0==0)==''
                !true==''
                false==''
                0==0
                -->true
4、js数据类型的区别
    基本数据类型是直接对值的操作
    引用数据类型是对空间地址的操作
        解释：代码在浏览器中从上到下执行，这个供代码执行的空间，我们叫做栈内存（也叫作全局作用域），
            在运行时遇到引用数据类型的时候，浏览器会再开辟一个内存空间，将这个对象的所有代码当做字符串存入这个空间中（这个空间一直被占用，我们叫这个内存空间为堆内存），
            浏览器会给这个空间一个16进制的地址，并且把这个地址返回给这个对象，也就是说这个对象中存的不是具体的代码，而是一个地址。
            当我们将这个对象赋值给另一个对象的时候，其实是将地址给到了另一个对象。
            那么也就是说，这两个对象操作的是同一空间，那么修改其中哪一个，空间中的内容都会发生变化
5、js数据类型的检测
    1、typeof
        语法：typeof 检测的值  或者typeof(检测的值)
        typeof 检测返回值是一个字符串，字符串中包含以下数据类型： 'number' 'string' 'object' 'function' 'undefined'
        typeof不能具体细分object下的数据类型 {}  []  /^$/-->'objcet'
        typeof null-->'object'
        如果运算中有两个以上的typeof，最终返回结果'string'***********
    2>.instanceof  判断已知对象类型的方法
        eg:[1,2] instanceof Array  -->true
    3>.constructor 判断
        eg:[1,2,3].constructor === Array  ---> true
    4>.prototype判断:Object.prototype.toString.call()  比较通用
        eg:Object.prototype.toString.call('珠峰培训') === '[object String]')---> true
6、js中的运算符
    数学运算：+  -  *  /  %  ++  --
    赋值运算：=  +=  -=  *=  /=  %=
    比较运算：==  ===  !=  >  <  >=  <=
    逻辑运算：&&  ||  !
    p.s:+=和=的区别
        =:覆盖盒子里原来的内容
        +=:保留盒子里原来的内容，进行类加
7、js中的判断语句
    1、if语句
        if判断中()内的运算返回值是布尔类型，if判断可以用在所有的js判断中
        在判断的时候，条件和执行语句没有关系
        语法：
            if(条件){
                条件成立执行的语句
            }

            if(条件){
                条件成立执行的语句
            }else{
                条件不成立执行的代码
            }

            if(条件){
                条件1成立执行的语句
            }else if{
                条件1不成立，条件2成立执行的代码
            }else{
                条件1和条件2都不成立执行的代码
            }
    2、switch语句
        switch只能进行===判断(绝对判断)，即当条件和值绝对比较的时候才能执行相关代码
        语法：
            switch(a){
                case 1:
                    执行代码块1
                    break;//如果不加break，后面的语句也会执行，不管条件是否成立
                case 2:
                    执行代码块2
                    break;
                default:
                    执行代码块3(n与case 1和case 2不同时执行的代码)
            }
    3、三元运算符/三目运算符
        语法：   声明 变量=（条件）?条件为true时执行的代码：条件为false时执行的代码
        本质：   是进行变量的赋值。判断一个条件成立时，给变量赋值a，如果不成立，给变量赋值b。
        还可以改写简单的if else判断：（条件）?条件成立执行的代码:条件不成立执行的代码
        如果没有不成立时执行的代码，可以使用void 0进行占位
        如果执行多条js代码，可以放在一个括号内，中间用逗号隔开

        0==''?console.log('成立'):console.log('不成立');
        0==''?(console.log('成立'),console.log('万岁')):console.log('不成立');
        0==''?console.log('成立'):void 0;//void (0)也行
=================================================================================
作业：
    1、背诵9条比较规则
    2、基本数据类型和引用数据类型的区别
    3、=和+=的区别
        var a=2;
        a=1;
        console.log(a);//1

        var a=2;
        console.log(a+=1);//3

预习：
    1、js中的循环循环
    2、隔行变色
    3、99乘法表
    4、选项卡