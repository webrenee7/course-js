第七周第一节关键词：
    扫盲：
        IP地址/MAC地址，DOS常用命令
        如何发布网站，前后端交互模型，前端性能优化，完整的URL地址包括，谷歌F12
        浏览器内核，浏览器兼容性，浏览器前缀
        HTML/XHTML/DHTML/XML/WHTML区分
        什么是JS
    什么是Node，Node的特点，Node中的模块********
    什么是事务？什么是报文
    什么是AJAX，怎么用（AJAX请求四步曲）********
    服务器状态码，AJAX状态码
========================================================
-----------扫盲区------------
1、IP地址和MAC地址
    电脑只要连上网，路由器就会给每一台电脑安排一个标识地址，这就是IP地址
    不仅产生IP地址，而且结合电脑的出产信息，生成一个全世界唯一的标识码，这就是MAC地址，也叫硬件地址
    IP地址可能重复，但是MAC地址不会
2、DOS常用命令
    1>.ipconfig    ==》查看本机IP地址
       ipconfig -all    ==》查看本机MAC地址
    2>.cls   ==》清屏
    3>.exit    ==》退出窗口
    4>.dir   ==》查看当前目录下所有的文件
    5>.cd  目录  ==>进入到某个目录下
        cd   /    ==》进入根目录
        cd  ./    ==》进入当前目录
        cd ../    ==》进入上级目录
    6>.mkdir  文件夹名称    ==》创建文件夹
    7>.copy 文件名    ==》创建文件
    7>.del  文件名    ==》删除文件
    ps:如何进入当前目录
        通过DOS命令 cd
        在当前目录窗口  shift+右键+打开命令窗口
        在当前目录窗口 地址栏输入cmd+回车
3、如何发布一个网站
    1>.买一台服务器（虚拟主机/云服务 阿里云），把我们的博客项目资源文件上传到服务器上（FTP上传工具），给服务器连网，服务器就会有一个IP地址（外网IP地址），以后用户和我们的服务器不在同一个网下，通过这个外网IP就可以找到我们的服务器了。一台服务器上会存放多个项目的源文件，可以支撑很多项目发布
    2>.买域名（万网:https://wanwang.aliyun.com（被阿里收购了））
    3>.域名解析（DNS解析）
    把域名和服务器关联到一起，因为解析域名的时候需要我们输入服务器的外网IP地址；从核心角度来讲，域名解析其实就是把域名和服务器的外网IP相关联的这条记录存放到DNS服务器上(DNS是全世界外网联盟管理的，不管是哪个国家的人注册域名进行解析，都会把相关的记录存放到DNS服务器上www.baidu.com 123.345.23.1)
    4>.在服务器上创建一个服务，让创建的服务负责接收客户端的请求，然后把客户需要的内容给客户，这样的话，我们的每一个项目都需要一个具体的服务来进行这些操作；==》一台服务器上如果要发布多个项目，那么需要有多个服务，如何区分这些服务呢？我们在创建服务的时候需要给每一个服务安排一个编号（端口号），两个不同的服务器的端口是不重复的。在服务器上创建服务的方式有很多：IIS、Apache、nginx、node
4、前后端交互模型
    请求阶段：
        1>.通过域名到DNS服务器上找服务器的外网IP地址
        2>.通过IP地址找到服务器
        3>.通过端口号找到对应的服务
    响应阶段：
        4>.服务器首先获取客户的请求信息，然后把需要的内容准备好，最后把客户端需要的文件中的“源代码”返回给客户端的浏览器
        5>.客户端接收服务器返回的内容（源代码），浏览器把源代码解析成为浏览器中的对应部分即可
5、前端性能优化有哪些方法
    遵循黄金法则：“减少http请求的次数和请求资源文件的大小”
    具体怎么做？
        css合并，压缩
        js合并，压缩
        images 雪碧图 压缩
6、一个完整的URL地址包括几部分
    URI（统一资源标识符）=URL（统一资源定位符）+URN（统一资源名称）
    http://www.zhufengpeixun.cn:80/index.html?name=zxt&age=30#video
    1>.传输协议  ==》用来传递客户端和服务器之间的交互信息的
        HTTP：超文本传输协议(默认)
        HTTPS：更加安全的超文本传输协议
        FTP：文件传输协议（相对于以上两种文本传输协议来说的话，传输的内容更大，一般应用于把项目资源文件上传到服务器上或者是网站上资源下载）
    2>.域名  ==》方便记忆，不用客户记忆服务器主机IP
        .cn  .com  .net  .org  .gov
        一级域名：www.qq.com
        二级域名：sports.qq.com
        三级域名：kbs.sports.qq.com
    3>.端口号  ==》用来区分同一台服务器上不同的服务
        一台服务器上的端口范围：0-65535之间  655363个
        我们在地址栏中不输入端口号，浏览器会根据不同的传输协议默认为我们补充端口号
        HTTP协议:80
        HTTPS协议:443
        FTP协议：21
    4>.请求资源文件的目录和名称  默认是index.html
        想要请求谁，都是以当前项目作为根目录，然后把路径地址和名称都准备齐全才可以
    5>.问号传参
        客户端传递给服务器端一些内容，“问号传参”的方式就是其中的一种，除了问号传参这种方式，还有放在“请求头”和“请求主体”中两种方式
        在相同的页面中我们可以根据URL问号传参不一样，在这个页面中展示不同的数据
    6>.锚点定位
        HASH值 哈希值
        客户端通过哈希把这个值传递给服务器，服务器接收到这个值后做不同的处理操作（腾讯实战会有）
7、你知道的浏览器有哪些
    谷歌、火狐、IE、欧朋、Safari
    中国特色浏览器：360浏览器(ie内核-->chrome内核)、猎豹浏览器(ie内核)、qq浏览器（ie内核-->webkit内核）、搜狗浏览器、百度浏览器、UC浏览器、遨游浏览器、世界之窗浏览器...
8、浏览器的内核有哪些
    Webkit(v8)    ==>Chrome，Safari
    Trident    ==>IE
    Gecko     ==>Firefox
    Presto==>Bink     ==>Opera
    中国版浏览器没有自己的内核，只是比别家的浏览器皮肤好看一点
9、浏览器前缀
    有些浏览器为了扩展某方面的功能，它们会选择新增的一些CSS属性，这些自行扩展的CSS属性也是浏览器专属的。为了让这些浏览器识别这些专属属性，CSS规范允许在CSS属性前增加各自的浏览器前缀。
    -webkit- Chrome,safari
    -moz-  firefox
    -ms-  ie
    -O-  opera
10、什么是JS
    js是一门基于客户端浏览器运行的轻量级的脚本编程语言（客户端编程语言）
    这句话已经不对了，===》js是一门全栈编程语言
    既可以编写客户端程序(js代码在客户端浏览器运行)
    还可以编写服务器端程序（js代码在服务器端的Node环境下运行）
11、谷歌浏览器F12
    Elements:html,css，盒子模型
    console:控制台输出，js代码执行
    Source:项目资源
    Network:包含了当前项目加载完成后，全部的前后端交互信息，也就是客户端发送请求传递给服务器的内容以及服务器返回给客户端的内容，在这里都可以看到
    Timeline:发送请求到响应需要的总时间
12、js中的弹出框
    1>.window.alert
        只有提示的作用 只有一个确定按钮
    2>.window.prompt
        不仅提示还有输入框    确定=》获取在文本框中输入的内容 取消==》null
    3>.window.confirm
        确定还是取消  有确定和取消两个按钮 true->确定  false->取消
13、Websotrm代码补全
    <!--div class="box" 有一个ul class="boxItem" ul下面有六个li，每个li中都有一个a标签，每一个a标签中都有一段文字和一个i标签和一个img标签-->
    div.box>ul.boxItem>li*6>a>i+img
    ul>li.box$*6
14、格林尼治标准时间（旧译格林尼治平均时间或格林威治标准时间；英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。自1924年2月5日开始，格林尼治天文台每隔一小时会向全世界发放调时信息。
========================================================================
-----------关于Node------------
1、Node的安装
    我们在安装完成Node之后，一般情况下Node都会把自己的操作命令（node -v）集成到DOS命令中，所以以后在DOS窗口中也是可以操作Node命令的
    问题：如果没有集成到DOS命令中，在DOS中执行NODE命令，都会提示"node 不是内部或外部的命令"，这样的话需要我们手动配置系统环境变量
    步骤：控制面板===》系统和安全===》系统===》环境变量
    默认安装目录：C:\Program Files\node.js
    【配置webstorm关于node代码的提示包】
    1>.File  ->Settings  ->Languages & Frameworks  ->Node.js and NPM
    2>.11以及以上（自带node提示包）  点击Enable按钮
        保证Node Interpreter后面的框中有NODE的安装目录下的node.exe(把NODE集成到webstorm中)，如果选择完成后，下面出现版本号
    3>.ie10及以下：需要自己下载提示包然后导入
        configure ->Archive file ->把自己下载的提示包拷贝到node的安装目录下  ->在Archive file中选择这个提示包  ->config
    4>.检查是否安装配置成功
        File  ->Settings  ->Languages & Frameworks  ->Javascript  ->Libraries
        保证：HTML、HTML/ES5、ES6、Node..core 这四个是选中的，这样不管是前端还是node的提示都有了（以后只要没有提示的时候，就到这个位置勾选上即可）
    【webstorm编码格式配置】
    Editor  ->File Encodings  ->把三项都调整为UTF-8编码格式
2、什么是Node，Node的特点
    什么是Node?
    Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。
    不是一个编程语言，它没有自己的语法规范，它只是一个工具或者一个环境平台，用来渲染和解析js的环境平台，类似于谷歌浏览器
    它的生产场景和作用：在真实项目中，我们会把Node安装到服务器上，这样的话，我们就可以在服务器端使用js代码编写一些业务处理了，把编写好的js代码直接的运行在Node环境下即可
    Node的特点：
    1>、Node解析和渲染js是基于webkit内核(v8引擎（极速引擎）)来操作的，用Node渲染js来开发后台程序比其他的JAVA或者PHP等语言都要快
    2>、Node环境中提供了无阻塞的I/0操作（文件或者文件目录的增删改查操作）
        a、js在客户端的浏览器中运行的时候，能否操作客户端本地的文件？
        肯定不能，这样的话才能保证客户端的安全，否则访问别人的网站很有可能造成自己信息泄露以及更多安全问题
        <input type="file"/>这个是浏览器提供的功能，用户可以自主性选择需要上传的文件
        b.js在服务器的Node环境下运行的时候能否操作服务器上的文件？
        是可以操作的，也就是在服务器运行的时候我们可以拿js中的一些方法（Node环境提供的）操作服务器上的文件
        c.JAVA等语言在读取文件内容的时候，一般都是把文件中内容读取完成后才可以做后面的事情（同步），但是Node中给js提供了同步读取和异步读取两个方法（无阻塞的I/O操作）
    3>、基于事件驱动的单线程异步操作（C模块）
2、Node中的模块
    Node中是按照模块的概念划分方法的：
   【内置模块】（Node环境天生自带的）
    Node中常用的三个内置模块
   1>.http    ==》用来处理服务和处理请求响应的模块
    createServer 创建服务
    var server1=http.createServer([callback]);//客户端向当前的这个服务发送请求后才会执行这个回调
    创建服务后客户端如何请求？？
        1、本机电脑即是客户端又是服务器端，客户端需要请求的其实就是本地服务，所以在浏览器地址栏中输入：http://localhost:81/index.html
        2、别人想要访问这个服务，不能通过localhost了，而需要通过ip来访问(外网IP，内网IP)例如：http://192.168.18.28/index.html
        注意：这种情况下，如果是局域网互相的访问，我们需要双方关掉自己的防火墙
    callback中的两个参数：
    1.request    ==》存储了客户端传递过来的全部请求信息
    request.url：存储的是客户端请求的url地址,但是这个地址不全，只能包含客户端请求的资源文件的路径和名称以及问号传递的参数值，URL其余部分没有
    request.url中存储了两部分内容（路径+问号传参），我们在项目中最好把两部分分别解析出来，以后想用哪部分就用哪部分
    2.response  ==》提供了一系列的方法供服务器端把内容返回给客户端
    response.write([value]):把value内容返回给客户端，response.write可以执行很多次，返回的内容一般都是字符串
    response.end([value]):和write一样也可以把内容返回，但是它还有结束返回的意思，遇到end，当前返回内容的操作就结束了，我们在返回的时候，如果不需要返回了，必须要使用end结束才可以
    listen  监听端口
    server1.listen([port],[callback])
    [port]:需要监听的端口0-65535之间，但是需要保证这个端口号没有被其他的服务占用
        报错：Error:listen EACCES 0.0.0.0:80   当前的80端口号已经被其他的服务占用了，我们不能监听这个端口号
    [callback]:当这个服务的端口监听成功后，就会执行此回调函数
        js运行在服务器端的Node下，处理后台需要做的事情，那么一个项目中，后台都需要做哪些事情？
        1>.在服务器上创建一个服务，并且给这个服务监听一个端口号
        2>.获取客户端发送的请求信息，以及传递过来的内容，解析请求和内容
        3>.根据客户端的请求在服务器上找到对应的数据内容
        4>.把准备的内容返回给客户端
    2>url    ==》提供对url地址的操作方法
        url.parse([url],true)  用来解析URL地址中各部分值的
        解析结果：
        /*
             Url {
             protocol: 'http:',  ->协议
             slashes: true,  ->是否有斜线
             auth: null,  ->作者
             host: 'www.zhufengpeixun.cn:80',   ->域名（IP）+端口
             port: '80',    ->端口
             hostname: 'www.zhufengpeixun.cn',   ->域名
             hash: '#play',    ->HASH值
             search: '?name=xy$age=25',   ->问号传参
             query: { name: 'xy$age=25' },    ->问号传参的值都是以对象键值对的方式存储起来了
             pathname: '/work/index.html',   ->请求资源文件的目录和名称（在地址前面默认有一个斜杠）
             path: '/work/index.html?name=xy$age=25',
             href: 'http://www.zhufengpeixun.cn:80/work/index.html?name=xy$age=25#play' }
        */
    3>.fs    ==》提供了对文件的I/O操作
        fs.readFile([pathname],[callback])：异步读取文件中的内容，
        fs.readFileSync([pathname],[encodeing])：同步读取文件中的内容，第一个参数是读取文件的路径，第二个参数是读取文件的编码格式（一般都用utf-8）
        async:异步  sync:同步
        fs.writeFile()：异步向某个文件中写入内容
        fs.writeFileSync([pathname],[content],[encode])：同步向某个文件中写入内容，每次都是覆盖写入，而且写入的内容一般是字符串格式的
   【自定义模块】（我们自己编写的）
    在Node环境下创建的每一个js文件都是一个独立的模块
    不同模块之间的方法是不冲突的，哪怕方法名是一样的
    想要在public模块中调取utils模块中的fn怎么调取？
    1>.utils暴露供被人使用的方法
        module.exports={fn:fn};
        module是Node环境中自带的属性，用来管理模块的
        exports是module对象中的属性，它也是一个对象数据类型，需要暴露哪些方法，就放在这个对象中即可
    2>.在public模块中导入utils模块
        var utils=require("./m/utils");
        utils.fn();
   【第三方模块】（别人写好的我们来用）
    1>.搜索：所有的第三方模块都在https://www.npmjs.com/这个网址中，我们要用的话，只需要在这个网址中找即可
    2>.安装和卸载：Node环境下下载安装或卸载第三方模块需要使用命令（nmp:就是Node模块管理的命令）
        安装到当前项目：npm install less
        安装到全局：npm install less -g
        卸载：npm uninstall less
        查看是否安装成功  lessc -v  出现版本号就是安装成功
    3>.导入：在我们的js程序中把安装完成的第三方模块导入进来，导入进来后就可以调取模块中提供的方法了
    通过require导入
    var lc=require("less");//一般没有路径问题，直接写模块名
    lc.render();//render就是less中提供的一个方法
3、MIME类型
   每一种文件都有自己的类型，这个类型被称为MIME
    HTML:text/html
    CSS:text/css
    JS:text/javascript
    TXT:text/plain
    JSON:application/json
    GIF:image/gif
    PNG:image/png
    JPG:image/jpeg
       .....................
---------------关于一些名词------------------
1、HTTP事务
    REQUEST（请求阶段）+RESPONSE（响应阶段），两个阶段的事情都完成，本次http请求的操作才算完成，才被称为一个HTTP事务
2、HTTP报文
    客户端传递给服务器的内容和服务器返回给客户端的内容，统称为http报文
    请求：客户端->服务器  客户端设置，服务器端获取
    响应：服务器->客户端  服务器端设置，客户端获取
    1>.起始行
        请求起始行，响应起始行
    2>.首部（头）
        通用头、请求头、响应头、自定义头（自定义请求头，自定义响应头）
    3>.主体
        请求主体，响应主体
    这些信息在浏览器的network中都可以查看到
    Headers包含了HTTP报文里面的所有的内容
    *【General（通用头）】  请求头和响应头都有的
        Request URL:http://localhost:81/index.html  请求的URL地址
        Request Method:GET  请求方式
        Status Code:200 OK  响应状态码
        Remote Address:[::1]:81  响应地址和端口号
    *【Response Headers（响应头）】  view source
        HTTP/1.1 200 OK  响应起始行：HTTP版本号，响应状态码，响应状态码说明
        //以下都属于响应首部
        服务器端传递给客户端的一些信息可以放在响应首部当中，客户端可以在响应首部中获取到服务器的相关信息（服务器端设置，客户端获取）
        content-Type: text/html  响应内容的格式和编码
        Date: Fri, 30 Dec 2016 03:33:21 GMT  服务器时间（格林尼治时间） 北京时间=GMT+8小时
        Connection: keep-alive
        Transfer-Encoding: chunked
    *【Request Headers（请求头）】  view source
        GET /index.html HTTP/1.1  请求起始行：请求方式，请求地址，HTTP版本号
        //以下都属于请求首部
        客户端会把一些信息放在请求首部中传递给服务器端，服务器端就可以在请求首部中获取到相关的内容（客户端设置，服务器端获取）
        Host: localhost:81
        Connection: keep-alive
        Cache-Control: max-age=0
        Upgrade-Insecure-Requests: 1
        User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36  浏览器的版本信息
        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
        Accept-Encoding: gzip, deflate, sdch, br
        Accept-Language: zh-CN,zh;q=0.8
    【Response（响应主体）】（服务器端设置，客户端获取）
        服务器传递给客户端的内容都在响应主体中
    【Request PayLoad（请求主体）】  客户端传递给服务器端的数据内容可以放在请求主体中传递给服务器，服务器就可以在请求主体中获取到传递进来的内容
3、客户端可以通过哪些方式把内容传递给服务器
    1>.问号传参：在请求的url地址后面通过?xxx=xxx的方式把内容传给服务器
    2>.设置请求头：客户端把需要传递给服务器的内容放在请求头中，在http传输的时候通过请求头把信息传递给服务器（例如：客户端把cookie信息传递给服务器一般都这么做）
    3>.设置请求主体：客户端把信息放在主体中传递给服务器（例如在POST系列请求中，由于传递给服务器的内容比较多，我们一般都放在请求主体中传给服务器）
   服务器可以通过哪些方式把内容传递给客户端
    1>.设置响应头：服务器把内容放在响应头中返回给客户端（例如服务器的时间，内容类型（content-type））
    2>.设置响应主体：基本上服务器返回给客户端的主要内容信息都是放在响应主体中返回给客户端的
4、HTML/XHTML/DHTML/XML/WHTML
    HTML：超文本标记语言 里面有很多常用的标签，不仅仅可以展示文字还可以展示图片，音频，视频等(1998年停止)
    XHTML：更新版本 更加严谨的HTML，我们现在用的就是XHTML
    HTML5：第五代更新版本 在原有HTML基础上新增了很多有助于开发的功能
    DHTML：页面中的数据是由前端动态绑定的
    XML：可扩展的标记语言，用于存储数据。在XML中出现的标签都不是w3c规定的，而是自己根据需求扩展出来的
    JSON:把对象的属性用双引号包起来，就是一个JSON对象
    WXML：微信小程序的页面文件

-------------关于AJAX---------------
1、什么是AJAX
    ajax javascript and xml:异步的JS和XML
    我们在客户端的js中可以使用ajax技术向服务器发送一个请求，从服务器端把需要展示在页面中的数据获取到，主要实现的是客户端和服务器之间的数据交互的
    按照AJAX的定义来看，客户端从服务器端获取的数据应该是XML格式的数据，但是真实项目中最常用的却是JSON格式的数据，所以客户端从服务器端获取的数据格式常见的有这几种：JSON格式/XML格式/文件流格式...
    什么是异步的JS？  --》局部刷新
    全局刷新：那会AJAX还没有被应用呢，页面是由服务器渲染的，服务器把渲染完成的结果给客户端的浏览器展示，但是在页面中，我们的某些操作可能会导致页面中的内容发生改变，这样的话，服务器需要把最新渲染完成的页面重新交给浏览器展示，这样浏览器需要把整个页面重新的刷新才可以
    谷歌邮箱率先应用AJAX技术，这样在页面中操作的时候，如果有一个区域需要重新加载，我们只需要使用AJAX从服务器端获取最新的数据，然后单独的把这个区域重新的渲染即可-》局部刷新
2、AJAX怎么用
    1>.创建一个AJAX对象
        var xhr=new XMLHttpRequest();
    2>.打开一个请求的URL地址：给AJAX对象做发送前的一些基础配置
        open([http method],[request url],[async:true(默认)/false],[username],[userpwd])
    3>.监听AJAX状态改变，在不同的状态下做不同的事情
        xhr.onreadystatechange=function(){
            xhr.readyState  AJAX状态
            xhr.status  服务器响应的网络状态码
            xhr.responseText 服务器响应主体内容（字符串/JSON字符串）
            if(xhr.readyState===4&&xhr.status=200){
                var val=xhr.responseText
            }
        }
    4>.发送请求
        xhr.send([data]);在请求主体中给服务器传递内容
        var xhr=new XMLHttpRequest();//在IE6及更低版本中，不支持该方法，需要用new ActiveXObject()，在这个新的类中还需要传递三种不同的参数才可以

【各部分详解】
http method:http请求方式
    不管是哪一种请求方式，客户端都可以给服务器传递内容，也可以从服务器获取内容
    【GET系列】给服务器的少，从服务器获取的多
        GET:一般应用于从服务器获取数据  给服务器的少，从服务器获取的多，例如图片延迟加载
        DELETE:一般应用于从服务器上删除文件
        HEAD：一般应用于客户端只想获取服务器返回的“响应头信息”
    【POST系列】给服务器的多，从服务器获取的少
        POST:向服务器增加资源文件  给服务器的多，从服务器获取的少，例如用户注册/上传图片
        PUT：放  在服务器上放一个文件
    GET系列和POST系列有哪些区别？
        GET系列传递给服务器内容都是通过问号传参的方式传过去的
            xhr.open("get","/temp.xml?name=zf&age=8");
            xhr.send(null);
        POST系列是通过请求主体传给服务器的
            xhr.open("get","/temp.xml");
            xhr.send("{"name":"zf","age":8}");
    1>、GET传给服务器的内容少，在传递给服务器的内容上有限制
        GET是在URL末尾追加问号传参传递的，如果传递的内容过多，URL就会变得很长，但是浏览器都有一个最大URL长度限制（谷歌8KB，火狐7KB, IE2KB）
        POST理论上没有传递大小的限制，但是真实项目中，为了保证传输的速度，我们自己会做限制，例如限制上传的内容在xxxKB以内
    2>.安全问题
        GET不安全，POST相对安全
        GET请求容易被URL劫持，导致传递给服务器的数据泄露
    3>.缓存问题
        GET请求可能会产生缓存(我们不可控)，POST不会
        地址一样，传参一样，浏览器识别不了了
        如何清除缓存？===>在URL后面追加一个随机数/时间戳
        xhr.open("get","/temp.xml?name=zf&_="+Math.random());
=========================================
request url：请求地址
    客户端是通过这个地址先找到服务器的对应的服务和对应接口，然后发个请求获取自己需要的数据；真实项目中获取数据的这个地址都是后台开发给前端的（API文档）
=========================================
    async/sync:设置同步还是异步，默认是true，代表异步，写false代表同步
=========================================
    userName&userPass:用户名密码，平时不用
=========================================
onreadystatechange:当AJAX的状态发生改变的时候  会改变3次
AJAX状态：代表AJAX的处理状态
    0  UNSENT  未发送，创建完成一个XHR的时候默认值就是0
    1  OPENED  已打开，已经执行xhr.open了
    2  HEADERS_RECEIVED  服务器响应头信息已经被客户端接收 已经执行xhr.send
    3  LOADING   服务器响应主体的内容正在返回
    4  DONE  服务器响应主体内容接收完成
    AJAX请求数据这件事从xhr.send开始，到xhr.readyState=4的时候才算结束
=========================================
xhr.status: 服务器响应状态码，服务器可以通过不同的码，反映出最后的结果
【2开头 请求成功】
    200  成功，以2开头的状态码都是成功  响应主体的内容已经成功返回了
【3开头 重定向】
    301  永久重定向（永久转移）
    302  临时重定向，处理服务器的负载均衡
            服务器的负载均衡  服务器集群
            当访问人数过多，当前服务器处理不过来，会临时转移到另外一台服务器上处理
    304  读取缓存数据（这个是自己在服务器上做的处理）
    ctrl+f5  清除当前页面缓存
【4开头  请求错误】
    400  请求参数错误
    401  无权限访问
    404  请求地址不存在
    ==》4开头都是客户端的问题
【5开头  服务器错误】
    500  未知的服务器错误
    503  服务器超负荷
    ==》5开头的都是服务器错误
AJAX中的同步和异步**************
    【AJAX中的同步】：当AJAX任务开始的时候（xhr.send）一直需要到readystatechange=4的时候，任务才结束，此时才可以处理其他的事情
    【AJAX中的异步】：当AJAX任务开始的时候（xhr.send）不需要到readystatechange=4，依然可以处理其他的事情，只有当其他任务完成后，我们再看是否到4，到达4后，再做一些相关的操作
========================================================================
案例：
    A,B,C模块的调取
    创建服务，请求页面
    获取服务器的时间
实战：CRM管理系统  明天


原生JS三大块：
    作用域，面向对象  轮播图
    事件
    AJAX
==============================================================================
考试：
1、什么是AJAX？
2、http的请求方式有哪些？GET请求和POST请求的区别？
3、网络状态码  200 301 302 304（读取缓存） 400 401 404 500 503
读缓存，不经常更新的内容，已经加载过的下次不再加载，从缓存读取
4、AJAX状态:0 1 2 3 4
5、AJAX常用属性和方法：
    常用方法：(公有7个方法)
        1>.设置请求头：setRequestHeader([key],[value])
        2>.获取请求头：getRequestHeader([key])

        3>.设置响应头：setResponseHeader([key],[value])
        4>.获取响应头：getResponseHeader([key])

        5>.打开URL地址：open([request method],[request url],[async:true/false]);
        6>.设置请求主体：send(data)

        7>.终止AJAX请求  abort
    属性：
        获取响应主体：responseText  responseXML //是属性，不是方法
        设置超时时间：xhr.timeout=3000

    ontimeout
    onreadystatechange

    还好。。
    下文。。
    _提示
6、获取服务器的时间
var xhr=new XMLHttpReauest();
xhr.open("head","getServerTime?_="+Math.random(),true);
xhr.onreadystatechange=function(){
    if(xhr.status!=200) return;
    if(xhr.readyState==2){
        //获取响应头
        var time=xhr.getResponseHeader("Date");
        time=new Date(time);
    }
    if(xhr.readyState==4){
        //获取响应主体
        var val=xhr.responseText;
    }
}
xhr.send(null);
=========================================================================
jquery中的ajax方法
        $.ajax({
            url:"data.txt",//请求地址
            type:"get",//请求方式
            dataType:"text",//预设获取数据的内容格式
            data:null,//传递给服务器的内容放在DATA中
            async:true,//设置同步还是异步
            cache:false,//清除GET系列请求的缓存
            timeout:10000,//设置超时时间
            success:function (result) {
                //请求成功执行这个回调函数，REQUEST是获取的响应主体内容
            },
            error:function (msg) {
                //请求失败，MSG中存储的就是失败的原因
            },
            complete:function () {
                //不管成功还是失败都会执行这里，它代表完成
            }
        });
