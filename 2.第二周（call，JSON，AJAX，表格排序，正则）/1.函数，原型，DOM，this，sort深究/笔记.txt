第二周第一节关键词：
    ☛ call、apply & bind
    ☛ 检测数据类型的几种方式
    ☛ dom映射、回流、文档碎片、innerHTML
    ☛ sort深究
    ☛ JSON
    ☛ ajax
    ☛ 类数组和数组
===============================================================================
1、call，apply，bind
    call方法
        修改函数中的this，并让函数执行
        1>.语法：
            fn.call(obj,num1,num2...);
            参数：obj:用来修改fn函数中的this
                  num1,num2...:传递给调用call方法的那个函数实例的--》传递给fn函数
        2>.执行过程：
            1>.fn通过自己的__proto__属性找到定义在Function.prototype上的call方法
            2>.把fn函数中的this修改成了call的第一个参数
            3>.fn执行
        3>.call方法实现基本原理：
            Function.prototype.call=function(obj){
                1.将this函数中的this关键字修改为obj
                2.this();//定义在原型上的方法中的this一般是当前实例
            }
            fn.call(obj);
        4>.一个call、多个call的区别
           一个call是fn执行
           如果是多个call方法连用，那么是最后一个call方法的第一个参数执行，如果这个参数不是函数会报错
           能不能找到call，就看是不是一个函数
        5>.call方法举例：
                function fn() {
                    console.log(this);
                }
                function fn2(){
                    console.log(2);
                }
                var obj={
                    name:'xy',
                    fn:fn
                }
                fn();//this-->window
                obj.fn();//this-->obj
                fn.call(obj);//fn通过call方法将fn中的this改为obj，并且fn执行
                fn.call.call(document.body);//--->将fn.call方法中的this修改为document.body==>报错：fn.call.call is not a function
                fn.call.call(fn2);//2  ===>fn2执行
    apply方法
        与apply方法基本相同，都是用来修改this关键字的
        不同点：传给调用apply的那个函数实例参数的方式不同，apply第二个参数是一个数组，是把数组里的每一项当做参数传给调用apply的函数的
        1>.语法：
            fn.apply(obj,[num1,num2...]);
        2>.举例：
            function sum(num1,num2){
                console.log(num1+num2);
            }
            sum.apply(null,[1,2]);//3
        3>.开启严格模式解析代码：'use strict'
            1>.call和apply修改this的时候，在非严格模式下，如果修改成null或undefined，浏览器会默认修改成window，在严格模式下，null和undefined不变。
            2>.在严格模式下，自运行函数中的this不是window，而是undefined
            3>.在严格模式下，函数执行的时候如果前面没有.，那么函数中的this默认是undefined，在非严格模式下是window
    bind方法：
        返回一个修改了this的没有执行的新函数，需要自己执行。不兼容ie6-8
        1>.语法：
            fn.bind(obj,num1,num2....);
        2>.举例：
            function sum(num1,num2){
                console.log(num1+num2);
            }
            sum.bind(null,1,2);//什么也不输出，只是修改了this而已  返回结果：调用了它的那个函数
            一般这样用：先修改this，执行的时候再传参
                var res=sum.bind(null);
                res(num,num2);
    ****总结：call,apply,bind的区别：
        相同点：都是修改this
        不同点：call,apply函数执行完了，bind返回没有执行的函数
                call和apply传参方式不同，call传的是参数列表，apply传的是数组
2、call、apply、bind应用
    1>.mySlice方法-->模拟原型上的slice方法
    2>.求数组的最大值和最小值
        1>.利用apply的传参方式
        2>.假设法
        3>.数组排序
        4>.Math.max()/Math.min()   eval  字符串拼接
    3>.求平均数
    4>.类数组转化为数组
    5>.异常信息捕获
3、检测数据类型的几种方式
    1>.typeof
    2>.instanceof
    3>.constructor
    4>.Object.prototype.toString.call()
3、dom映射、回流、重绘、文档碎片、innerHTML
4、sort深究
5、JSON
6、AJAX


























5、打断点
    浏览器打断点：
        Sources
        在断点那行点击
        刷新页面
        f11，逐行调试
    代码里面加断点：debugger;
------------------------------------------------------------------------
//后台会提供一个数据请求的接口，前端通过接口地址可以请求到后台的数据
//前端发送一条请求给后台，后台接收到请求后把对应的数据准备好，
//后台准备好数据后再把数据返回给前端，后台一般返回给前端的数据都是JSON格式的数据
// 前端得到数据后需要进行数据解析(把对于我们有用的数据得到)-->把数据绑定在HTML页面上
//JSON不是一个单独的数据类型，它只是一种特殊的数据格式，它是对象数据类型的

1、JSON
    1>.JSON格式的对象和js格式的对象的区别：
        1.属性名必须用双引号包起来
        2.属性值如果是字符串，也用引号
    2>.JSON格式的字符串与JSON格式的对象的相互转化
        在JS中，JSON是定义在windwo下的一个属性
        将JSON格式的字符串转化为JSON格式的对象****************
            JSON.parse(jsonStr);//不兼容
            eval("("+jsonStr+")");
        将JSON格式的对象转化为JSON格式的字符串
            JSON.stringify(jsonObj);//不兼容
    注意：JSON这个对象在ie7及以下不存在，那么JSON的两个属性方法也不存在
    ====>JSON可以使用eval来处理，eval方法是把字符串当做JS表达式来运行的，其实是间接去引号
2、向页面添加元素的方式以及利弊分析
    1>.使用动态创建元素，通过appendChild或者insertBefore的方式添加并不会对原来存在的元素造成影响（比如以前给li绑定的事件还在）但是这种方式会引起多次回流，造成性能浪费
    2>.使用innerHTML拼接字符串的方式，虽然也能添加元素，但是会破坏原来已经存在的元素（比如li的绑定的事件已经消失了）
    p.s:如果原来的ul中是空的，那么这两个方式都可以，但是更推荐字符串拼接方式
3、DOM回流和重绘：
    回流：元素的位置的改变，元素的增加和删除都会产生DOM回流，然而浏览器就需要重新渲染，从而造成性能的浪费
    重绘：元素样式等改变比如背景色引起重绘
    动态添加元素的方式会引起多次回流，造成性能浪费
    使用innerHTML方式虽然只引起一次回流但是却对原来的元素造成了影响
4、DOM映射
    通过DOM的方式获取到的一个元素集合（类数组Lis）仍然和页面内的元素保持联系。并且这个元素集合会随着页面内元素的增加而增加，减少而减少
    即使从这个Lis的类数组中把这些li重新添加到一个新的空数组中，这个DOM的映射关系仍然还存在********
5、文档碎片
    可以理解为一个容器，这个容器就是专门装载DOM对象的
    var frg=document.createDocumentFragment();
6、try catch
    try catch是js中常用的一种容错处理方式：
    try{
        先尝试在try中的代码，如果这里的代码报错，那么就执行catch里的代码
    }catch(e){
        这个e是一个对象，其中e.message保存着上面try代码中报的错误
    }
8、类数组转化为数组

9、sort方法排序
    return的值决定是否交换位置。如果return一个恒大于0的数，就是倒叙，如果是一个恒小于0 的数，就是不变
    ary.sort(function(a,b){//a和b为数组中相邻的两项
        return a-b;//升序
        return b-a;//降序
        return (a.name)localCompare(b.name);//字符串比较方法
    })
10、排序页面中的li
    1>.先获取到Lis这个集合里面包含的所有的li
    2>.把Lis从类数组转化为数组 listToArray
    3>.只要是数组就可以使用sort方法排序
    4>.DOM映射关系还存在，那么把排序之后的数组重新添加到页面中（更换位置）
    5>.注意利用文档碎片处理多次回流问题

--------------------------------------
数据类型的判断
1、typeof
    返回值：number string boolean object undefined function
    局限性：不能清晰地判断引用数据类型
2、instanceof
    实例 instanceof 类
    判断一个实例是否属于一个类
    返回值：true或false
    [] instanceof Array==>true
    [] instanceof Object==>true
    5 instanceof Number==>false   基本数据类型不是实例
    new Number instanceof Number==>true
    局限性：不能很好地判断基本数据类型，如果要判断，必须用new的方式
3、constructor
    [].constructor;//function Array(){[native code]}
    直接打印自己是哪个类的实例
    然而这个属性是可以被修改的
    function Human(){}
    var h1=new Human;
    Human.prototype={};
    h1.constructor;//function Object(){[native code]}
    为了避免Human上的constructor丢失
    Human.prototype.constructor=Human;
4、Object.prototype.toString.call(你要检测的数据)
    []==>"[object Array]"
    new Date==>"[object Date]"
    {}==>"[object Object]"
    /^\s$/==>"[object RegExp]"
    div==>"[object HTMLDivElement]"
//如何判断一个引用数据类型是不是{}****************************************
Object.prototype.toString().call()
var obj={}
if(obj.toString()==="[object Object]"){
    alert(""花括号);
}
--------------------------------------------------------------------------
1、表格独有属性和方法：
    var tab=document.getElementById("tab");
    var thead=tab.tHead;//获取表头
    var theadRow=thead.rows[0];//获取表头中所有的行的第一行
    var ths=theadRow.cells;//cells就是获取行内的所有列
    var tBody=tab.tBodies[0];//tBodies表格下所有的tbody，通过索引0获取第一个
    var tBodyRows=tBody.rows;//获取tBody下所有的行

2、AJAX
    AJAX=Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。
    ajax原理：
        1>.创建一个异步对象 new XMLHttpRequest()
        2>.xhr.open("get/post(请求方式)","url(请求地址或接口)",true(异步)/false(同步));
        3>.绑定onreadystatechange事件  成功返回并且携带数据
            xhr.readyState==4  &&xhr.status==200
            xhr.readyState==200成功
            xhr.readyState==404  找不到
            xhr.readyState==502  服务器错误
            xhr.readyState==304  本地缓存
        4>.xhr.send(null); xhr出发
3、表格排序过程










